!function(e){var t={};function n(o){if(t[o])return t[o].exports;var a=t[o]={i:o,l:!1,exports:{}};return e[o].call(a.exports,a,a.exports,n),a.l=!0,a.exports}n.m=e,n.c=t,n.d=function(e,t,o){n.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:o})},n.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},n.t=function(e,t){if(1&t&&(e=n(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var o=Object.create(null);if(n.r(o),Object.defineProperty(o,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var a in e)n.d(o,a,function(t){return e[t]}.bind(null,a));return o},n.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return n.d(t,"a",t),t},n.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},n.p="",n(n.s=0)}([function(e,t,n){"use strict";n.r(t);var o={SCRIPT_ID:"1D2hRx_8oVLxxZ86e0kNGSU9AJzWXqe0kFjQotyKJYYI_dn6mrgoKh9KH",CLIENT_ID:"120774100761-kglgrp4khpcjrpfvgbn7vqoqfcpnkvep.apps.googleusercontent.com",API_KEY:"AIzaSyCFsUU7845Cf03LtAFBkpOWezSejhSGF8U",DISCOVERY_DOCS:["https://script.googleapis.com/$discovery/rest?version=v1"],SCOPES:"https://www.googleapis.com/auth/drive https://www.googleapis.com/auth/spreadsheets"};function a(){}a.registerListeners=function(e,t){a.SIGNIN_STATUS_LISTENER=e,a.CURRENT_USER_LISTENER=t},a.load=function(e,t,n,o,r){a.SCRIPT_ID=e,a.CLIENT_ID=t,a.API_KEY=n,a.DISCOVERY_DOCS=o,a.SCOPES=r,gapi.load("client:auth2",a.initClient)},a.initClient=function(){gapi.client.init({apiKey:a.API_KEY,clientId:a.CLIENT_ID,discoveryDocs:a.DISCOVERY_DOCS,scope:a.SCOPES}).then(function(){void 0!==a.SIGNIN_STATUS_LISTENER&&(gapi.auth2.getAuthInstance().isSignedIn.listen(a.SIGNIN_STATUS_LISTENER),a.SIGNIN_STATUS_LISTENER(gapi.auth2.getAuthInstance().isSignedIn.get())),void 0!==a.CURRENT_USER_LISTENER&&(gapi.auth2.getAuthInstance().currentUser.listen(a.CURRENT_USER_LISTENER),a.CURRENT_USER_LISTENER(gapi.auth2.getAuthInstance().currentUser.get()))})},a.signIn=function(){gapi.auth2.getAuthInstance().signIn()},a.signOut=function(){gapi.auth2.getAuthInstance().signOut()},a.runScript=function(e,t,n,o){gapi.client.script.scripts.run({scriptId:a.SCRIPT_ID,resource:{function:e,parameters:t,devMode:!0}}).then(function(e){var t=e.result;if(t.error&&t.error.status)var a="Error calling API:\n"+JSON.stringify(t,null,2);else if(t.error){var r=t.error.details[0];a=r.errorMessage;if(console.error("Script error message: "+a),r.scriptStackTraceElements){console.error("Script error stacktrace:");for(var i=0;i<r.scriptStackTraceElements.length;i++){var s=r.scriptStackTraceElements[i];console.error("\t"+s.function+":"+s.lineNumber)}}o(a)}else n(t.response.result)})};var r=!1,i=1e3;window.addEventListener("load",function(){console.log("preventFormSubmit");for(var e=document.querySelectorAll("form"),t=0;t<e.length;t++)e[t].addEventListener("submit",function(e){console.log("submitEvent"),e.preventDefault()})});var s={girl:{key:"girl",name:"Isabelle",css:"css/girl/bootstrap.min.css",icon:"flaticon-baby-girl",background:"images/girl/background.png"},boy:{key:"boy",name:"Ethan",css:"css/boy/bootstrap.min.css",icon:"flaticon-baby",background:"images/boy/background.png"}},c=s.girl,l={templates:{}};function u(e){e=e||s.boy,Cookies.set("theme",e.key),c=e,$("#babyIcon").removeClass(),$("#babyIcon").addClass(e.icon),$("#babyName").text(e.name),$("#themeLink").attr("href",e.css),$("#backgroundImg").attr("src",e.background)}function d(e){e?($("#signInModal").modal("hide"),$("#signInSection").hide(),$("#currentUserSection").show(),$("#signedInView").show(),p()):($("#signInModal").modal("show"),$("#signInSection").show(),$("#currentUserSection").hide(),$("#signedInView").hide())}function g(e){var t=e.isSignedIn()?e.getBasicProfile().getEmail():"";$("#currentUser").text(t)}function p(){I("Loading..."),r?setTimeout(function(){f({dashboard:sampleDashboardContext,today:sampleTodayContext,yesterday:sampleYesterdayContext})},i):a.runScript("loadData",[c.name],f,b)}function f(e){S("#dashboard-template","#dashboard",e.dashboard),S("#today-template","#today",e.today),S("#yesterday-template","#yesterday",e.yesterday),m()}function S(e,t,n){void 0===l.templates[e]&&(l.templates[e]=$(e).html());var o=Handlebars.compile(l.templates[e])(n);$(t).html(o)}function I(e){$("#overlay-text").text(e),$("#wait").css("display","block")}function m(){$("#wait").css("display","none")}function b(e){m(),alert(e),$("#submitBtn").val("Submit")}function v(){console.log("resetForm");var e=6e4*(new Date).getTimezoneOffset(),t=new Date(Date.now()-e).toISOString().slice(0,-1);t.slice(0,16);$("#date").val(t.slice(0,16)),$("#amount").val(""),$("#type").val(""),$("#time").val(""),$("#meal").val(""),$("#vitamin-no").click(),$("#wet-no").click(),$("#dirty-no").click(),$("#weight").val(""),$("#notes").val(""),$("#bath-no").click()}$(function(){console.log("Loading page"),a.registerListeners(d,g),a.load(o.SCRIPT_ID,o.CLIENT_ID,o.API_KEY,o.DISCOVERY_DOCS,o.SCOPES),$("#weight").mask("#0.00",{reverse:!1,placeholder:"__.__"});var e=Cookies.get("theme");u(s[e]),function(){var e=$("#day-partial").html(),t=Handlebars.compile(e);Handlebars.registerPartial("dayPartial",t)}(),$(".navbar-nav>.nav-close>a").on("click",function(){$(".navbar-collapse").collapse("hide")}),$(".navbar-collapse>div>button").on("click",function(){$(".navbar-collapse").collapse("hide")}),$(".signIn").on("click",function(){a.signIn()}),$("#signOut").on("click",function(){a.signOut()}),$(".navbar-nav>.dropdown>div>a").on("click",function(){u(s[$(this).attr("data-baby")]),$(".navbar-collapse").collapse("hide"),p()}),$("#addNewModal").on("show.bs.modal",function(e){v()}),$("#addNewModal").on("hidden.bs.modal",function(e){v()})})}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,